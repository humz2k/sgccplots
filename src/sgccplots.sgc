#include <stdlib.sgh>
#include "../include/raylib.sgh"

struct drawer_struct;
typedef struct drawer_struct* drawer;

#include <filter_map_reduce.sgh>
#include <assert.sgh>
#include <string.sgh>

#include "../include/sgccplots.sgh"

#include "drawers.sgh"

#include "plotstruct.sgh"

#include "colors.sgh"

string color_cycle[] = {
    "blue",
    "orange",
    "green",
    "purple",
    "skyblue",
    "red",
    "brown"
};

int n_cycle = 7;

typedef struct plot_struct* plot;

plot make_plot(int screenWidth, int screenHeight, double x_start, double y_start, double x_end, double y_end, double padx, double pady){
    plot out = (plot)GC_malloc(sizeof(struct plot_struct));
    out->screenWidth = screenWidth;
    out->screenHeight = screenHeight;
    out->x_start = (x_start);
    out->y_start = y_start;
    out->dataWidth = (x_end) - x_start;
    out->dataHeight = (y_end) - y_start;
    double pad_width = (out->dataWidth / ((double)out->screenWidth)) * padx;
    double pad_height = (out->dataHeight / ((double)out->screenHeight)) * pady;
    out->x_start -= pad_width;
    out->dataWidth += pad_width*2;
    out->y_start -= pad_height;
    out->dataHeight += pad_height*2;
    out->drawers = std.make_list<drawer>();
    out->color_cycle = 0;
    return out;
}

static inline void init_window(plot plt){
    InitWindow(plt->screenWidth,plt->screenHeight,"plot");
    SetTargetFPS(60);
}

static inline void close(plot plt){
    CloseWindow();
}

static inline void draw_all(plot plt){
    foreach (auto i in plt->drawers){
        plt.draw_elem(i);
    }
}

void line(plot plt, std.list<double> xs, std.list<double> ys, float thickness, string color){
    println(color);
    plt->drawers.append(make_line_drawer(xs,ys,thickness,string2color(color)));
}

void scatter(plot plt, std.list<double> xs, std.list<double> ys, string style, float radius, string color){
    println(color);
    plt->drawers.append(make_scatter_drawer(xs,ys,radius,string2color(color),style));
}

void y_axis(plot plt, float radius, string color){
    plt->drawers.append(make_y_axis_drawer(radius,string2color(color)));
}

void x_axis(plot plt, float radius, string color){
    plt->drawers.append(make_x_axis_drawer(radius,string2color(color)));
}

void y_axis(plot plt, float radius){
    plt.y_axis(radius,"black");
}

void x_axis(plot plt, float radius){
    plt.x_axis(radius,"black");
}

void y_axis(plot plt){
    plt.y_axis(0.5,"black");
}

void x_axis(plot plt){
    plt.x_axis(0.5,"black");
}
 
void axes(plot plt, float radius, string color){
    plt.y_axis(radius,color);
    plt.x_axis(radius,color);
}

void axes(plot plt, float radius){
    plt.axes(radius,"black");
}

void axes(plot plt){
    plt.axes(0.5,"black");
}

void axes(plot plt, plot_arg arg0){
    float thickness = 0.5;
    string color = "black";
    switch (arg0.t){
        case ARG_THICKNESS:
            thickness = arg0.data.f;
            break;
        case ARG_COLOR:
            color = arg0.data.s;
            break;
        default:
            break;
    }
    plt.axes(thickness,color);
}

void axes(plot plt, plot_arg_list args){
    float thickness = 0.5;
    string color = "black";
    foreach(auto arg0 in args){
        switch (arg0.t){
            case ARG_THICKNESS:
                thickness = arg0.data.f;
                break;
            case ARG_COLOR:
                color = arg0.data.s;
                break;
            default:
                break;
        }
    }
    plt.axes(thickness,color);
}

template<T = float,int>{

    std.list<double> to_double_list(std.list<T> lst){
        auto out = std.make_list<double>();
        for (int i = 0; i < len(lst); i++){
            out.append(lst[i]);
        }
        return out;
    }

    void line(plot plt, std.list<T> xs, std.list<T> ys, float thickness, string color){
        line(plt,xs.to_double_list(),ys.to_double_list(),thickness,color);
    }

    void scatter(plot plt, std.list<T> xs, std.list<T> ys, string style, float radius, string color){
        scatter(plt,xs.to_double_list(),ys.to_double_list(),style,radius,color);
    }
}

plot_arg gColor(string color){
    plot_arg out;
    out.t = ARG_COLOR;
    out.data.s = color;
    return out;
}

plot_arg gRadius(float radius){
    plot_arg out;
    out.t = ARG_RADIUS;
    out.data.f = radius;
    return out;
}

plot_arg gThickness(float thickness){
    plot_arg out;
    out.t = ARG_THICKNESS;
    out.data.f = thickness;
    return out;
}

plot_arg gStyle(string style){
    plot_arg out;
    out.t = ARG_STYLE;
    out.data.s = style;
    return out;
}

plot_arg_list __add__(plot_arg a, plot_arg b){
    plot_arg_list out = std.make_list<plot_arg>();
    out.append(a);
    out.append(b);
    return out;
}

plot_arg_list __add__(plot_arg_list a, plot_arg b){
    a.append(b);
    return a;
}

template<T = double, float, int>{

    void line(plot plt, std.list<T> xs, std.list<T> ys, float thickness){
        line(plt,xs,ys,thickness,plt.cycle_colors());
    }

    void line(plot plt, std.list<T> xs, std.list<T> ys){
        line(plt,xs,ys,1);
    }

    void line(plot plt, std.list<T> xs, std.list<T> ys, plot_arg arg0){
        float thickness = 1;
        string color = "none";
        switch (arg0.t){
            case ARG_THICKNESS:
                thickness = arg0.data.f;
                break;
            case ARG_COLOR:
                color = arg0.data.s;
                break;
            default:
                break;
        }
        if (color == "none"){
            color = plt.cycle_colors();
        }
        line(plt,xs,ys,thickness,color);
    }

    void line(plot plt, std.list<T> xs, std.list<T> ys, plot_arg_list args){
        float thickness = 1;
        string color = "none";
        foreach(auto arg0 in args){
            switch (arg0.t){
                case ARG_THICKNESS:
                    thickness = arg0.data.f;
                    break;
                case ARG_COLOR:
                    color = arg0.data.s;
                    break;
                default:
                    break;
            }
        }
        if (color == "none"){
            color = plt.cycle_colors();
        }
        line(plt,xs,ys,thickness,color);
    }

    void scatter(plot plt, std.list<T> xs, std.list<T> ys, string style, float radius){
        scatter(plt,xs,ys,style,radius,plt.cycle_colors());
        plt->color_cycle++;
    }

    void scatter(plot plt, std.list<T> xs, std.list<T> ys, string style){
        scatter(plt,xs,ys,style,1);
    }

    void scatter(plot plt, std.list<T> xs, std.list<T> ys){
        scatter(plt,xs,ys,"o");
    }

    void scatter(plot plt, std.list<T> xs, std.list<T> ys, plot_arg arg0){
        float radius = 1;
        string color = "none";
        string style = "o";
        switch (arg0.t){
            case ARG_STYLE:
                style = arg0.data.s;
                break;
            case ARG_RADIUS:
                radius = arg0.data.f;
                break;
            case ARG_COLOR:
                color = arg0.data.s;
                break;
            default:
                break;
        }
        if (color == "none"){
            plt.cycle_colors();
        }
        scatter(plt,xs,ys,style,radius,color);
    }

    void scatter(plot plt, std.list<T> xs, std.list<T> ys, plot_arg_list args){
        float radius = 1;
        string color = "none";
        string style = "o";
        foreach(auto arg0 in args){
            switch (arg0.t){
                case ARG_STYLE:
                    style = arg0.data.s;
                    break;
                case ARG_RADIUS:
                    radius = arg0.data.f;
                    break;
                case ARG_COLOR:
                    color = arg0.data.s;
                    break;
                default:
                    break;
            }
        }
        if (color == "none"){
            color = plt.cycle_colors();
        }
        scatter(plt,xs,ys,style,radius,color);
    }

}

void show(plot plt){
    plt.init_window();

    while (!WindowShouldClose())
    {
        BeginDrawing();

        ClearBackground(RAYWHITE);

        plt.draw_all();

        EndDrawing();
    }

    plt.close();
}