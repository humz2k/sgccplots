#include <stdlib.sgh>
#include "../include/raylib.sgh"

struct drawer_struct;
typedef struct drawer_struct* drawer;

#include <filter_map_reduce.sgh>
#include <assert.sgh>
#include <string.sgh>

#include "../include/sgccplots.sgh"

string color_cycle[] = {
    "blue",
    "orange",
    "green",
    "purple",
    "skyblue",
    "red",
    "brown"
};

int n_cycle = 7;

struct plot_struct{
    int screenWidth;
    int screenHeight;
    double x_start;
    double y_start;
    double dataWidth;
    double dataHeight;
    std.list<drawer> drawers;
    int color_cycle;
};

typedef struct plot_struct* plot;

plot make_plot(int screenWidth, int screenHeight, double x_start, double y_start, double x_end, double y_end, double padx, double pady){
    plot out = (plot)GC_malloc(sizeof(struct plot_struct));
    out->screenWidth = screenWidth;
    out->screenHeight = screenHeight;
    out->x_start = (x_start);
    out->y_start = y_start;
    out->dataWidth = (x_end) - x_start;
    out->dataHeight = (y_end) - y_start;
    double pad_width = (out->dataWidth / ((double)out->screenWidth)) * padx;
    double pad_height = (out->dataHeight / ((double)out->screenHeight)) * pady;
    out->x_start -= pad_width;
    out->dataWidth += pad_width*2;
    out->y_start -= pad_height;
    out->dataHeight += pad_height*2;
    out->drawers = std.make_list<drawer>();
    out->color_cycle = 0;
    return out;
}

static inline float2 world2screen(plot plt, double x, double y){
    return make_float2(((x - plt->x_start)/plt->dataWidth) * (double)plt->screenWidth,(1-((y - plt->y_start)/plt->dataHeight)) * (double)plt->screenHeight);
}

static inline void init_window(plot plt){
    InitWindow(plt->screenWidth,plt->screenHeight,"plot");
    SetTargetFPS(60);
}

static inline void close(plot plt){
    CloseWindow();
}

static inline void draw_point(plot plt, float2 pix, float radius_, Color color, string style){
    float radius = (radius_/(plt->dataWidth)) * (float)(plt->screenWidth);
    Vector2 point;
    point.x = pix.x;
    point.y = pix.y;
    if (style == "o"){
        DrawCircleV(point,radius,color);
        return;
    }
    if (style == "."){
        DrawPixel(point.x,point.y,color);
        return;
    }
    
}

static inline void draw_points(plot plt, std.list<double> x, std.list<double> y, float radius, Color color, string style){
    assert(len(x) == len(y));
    for (int i = 0; i < len(x); i++){
        plt.draw_point(plt.world2screen(x[i],y[i]),radius,color,style);
    }
}

static inline void draw_line_segment(plot plt, float2 start_, float2 end_, float thickness_, Color color){
    float thickness = (thickness_/(plt->dataWidth)) * (float)(plt->screenWidth);
    Vector2 start;
    start.x = start_.x;
    start.y = start_.y;
    Vector2 end;
    end.x = end_.x;
    end.y = end_.y;
    DrawLineEx(start,end,thickness,color);
}

static inline void draw_line(plot plt, std.list<double> x, std.list<double> y, float thickness, Color color){
    assert(len(x) == len(y));
    for (int i = 0; i < len(x)-1; i++){
        plt.draw_line_segment(plt.world2screen(x[i],y[i]),plt.world2screen(x[i+1],y[i+1]),thickness,color);
    }
}

static inline void draw_y_axis(plot plt, float thickness, Color color){
    float2 zero = plt.world2screen(0,0);
    float2 start = make_float2(zero.x,0);
    float2 end = make_float2(zero.x,plt->screenHeight);
    plt.draw_line_segment(start,end,thickness,color);
}

static inline void draw_x_axis(plot plt, float thickness, Color color){
    float2 zero = plt.world2screen(0,0);
    float2 start = make_float2(0,zero.y);
    float2 end = make_float2(plt->screenWidth,zero.y);
    plt.draw_line_segment(start,end,thickness,color);
}

struct line_drawer_struct{
    std.list<double> xs;
    std.list<double> ys;
    float thickness;
    Color color;
};

struct scatter_drawer_struct{
    std.list<double> xs;
    std.list<double> ys;
    float radius;
    Color color;
    string style;
};

struct x_axis_drawer_struct{
    float thickness;
    Color color;
};

struct y_axis_drawer_struct{
    float thickness;
    Color color;
};

enum drawer_t{
    LINE_DRAWER,
    SCATTER_DRAWER,
    X_AXIS_DRAWER,
    Y_AXIS_DRAWER
};

struct drawer_struct{
    enum drawer_t t;
    union { 
        struct line_drawer_struct line_drawer;
        struct scatter_drawer_struct scatter_drawer;
        struct x_axis_drawer_struct x_axis_drawer;
        struct y_axis_drawer_struct y_axis_drawer;
    } drawers;
};

static inline drawer make_line_drawer(std.list<double> xs, std.list<double> ys, float thickness, Color color){
    struct line_drawer_struct ldraw;
    ldraw.xs = xs;
    ldraw.ys = ys;
    ldraw.thickness = thickness;
    ldraw.color = color;
    drawer out = (drawer)GC_malloc(sizeof(struct drawer_struct));
    out->t = LINE_DRAWER;
    out->drawers.line_drawer = ldraw;
    return out;
}

static inline drawer make_scatter_drawer(std.list<double> xs, std.list<double> ys, float radius, Color color, string style){
    struct scatter_drawer_struct ldraw;
    ldraw.xs = xs;
    ldraw.ys = ys;
    ldraw.radius = radius;
    ldraw.color = color;
    ldraw.style = style;
    drawer out = (drawer)GC_malloc(sizeof(struct drawer_struct));
    out->t = SCATTER_DRAWER;
    out->drawers.scatter_drawer = ldraw;
    return out;
}

static inline drawer make_x_axis_drawer(float thickness, Color color){
    struct x_axis_drawer_struct ldraw;
    ldraw.thickness = thickness;
    ldraw.color = color;
    drawer out = (drawer)GC_malloc(sizeof(struct drawer_struct));
    out->t = X_AXIS_DRAWER;
    out->drawers.x_axis_drawer = ldraw;
    return out;
}

static inline drawer make_y_axis_drawer(float thickness, Color color){
    struct y_axis_drawer_struct ldraw;
    ldraw.thickness = thickness;
    ldraw.color = color;
    drawer out = (drawer)GC_malloc(sizeof(struct drawer_struct));
    out->t = Y_AXIS_DRAWER;
    out->drawers.y_axis_drawer = ldraw;
    return out;
}

static inline void draw_elem(plot plt, drawer d){
    switch (d->t){
        case LINE_DRAWER:
            plt.draw_line(d->drawers.line_drawer.xs,d->drawers.line_drawer.ys,d->drawers.line_drawer.thickness,d->drawers.line_drawer.color);
            break;
        case SCATTER_DRAWER:
            plt.draw_points(d->drawers.scatter_drawer.xs,d->drawers.scatter_drawer.ys,d->drawers.scatter_drawer.radius,d->drawers.scatter_drawer.color,d->drawers.scatter_drawer.style);
            break;
        case X_AXIS_DRAWER:
            plt.draw_x_axis(d->drawers.x_axis_drawer.thickness,d->drawers.x_axis_drawer.color);
            break;
        case Y_AXIS_DRAWER:
            plt.draw_y_axis(d->drawers.y_axis_drawer.thickness,d->drawers.y_axis_drawer.color);
            break;
        default:
            break;
    }
}

static inline void draw_all(plot plt){
    foreach (auto i in plt->drawers){
        plt.draw_elem(i);
    }
}

static inline Color string2color(string col){
    if (col == "lightgray")return LIGHTGRAY;
    if (col == "gray")return GRAY;
    if (col == "darkgray")return DARKGRAY;
    if (col == "blue")return BLUE;
    if (col == "red")return RED;
    if (col == "orange")return ORANGE;
    if (col == "green")return GREEN;
    if (col == "purple")return PURPLE;
    if (col == "skyblue")return SKYBLUE;
    if (col == "brown")return BROWN;
    if (col == "black")return BLACK;
    return BLACK;
}

void line(plot plt, std.list<double> xs, std.list<double> ys, float thickness, string color){
    println(color);
    plt->drawers.append(make_line_drawer(xs,ys,thickness,string2color(color)));
}

void scatter(plot plt, std.list<double> xs, std.list<double> ys, string style, float radius, string color){
    println(color);
    plt->drawers.append(make_scatter_drawer(xs,ys,radius,string2color(color),style));
}

void y_axis(plot plt, float radius, string color){
    plt->drawers.append(make_y_axis_drawer(radius,string2color(color)));
}

void x_axis(plot plt, float radius, string color){
    plt->drawers.append(make_x_axis_drawer(radius,string2color(color)));
}

void y_axis(plot plt, float radius){
    plt.y_axis(radius,"black");
}

void x_axis(plot plt, float radius){
    plt.x_axis(radius,"black");
}

void y_axis(plot plt){
    plt.y_axis(0.5,"black");
}

void x_axis(plot plt){
    plt.x_axis(0.5,"black");
}
 
void axes(plot plt, float radius, string color){
    plt.y_axis(radius,color);
    plt.x_axis(radius,color);
}

void axes(plot plt, float radius){
    plt.axes(radius,"black");
}

void axes(plot plt){
    plt.axes(0.5,"black");
}

template<T = float,int>{

    std.list<double> to_double_list(std.list<T> lst){
        auto out = std.make_list<double>();
        for (int i = 0; i < len(lst); i++){
            out.append(lst[i]);
        }
        return out;
    }

    void line(plot plt, std.list<T> xs, std.list<T> ys, float thickness, string color){
        line(plt,xs.to_double_list(),ys.to_double_list(),thickness,color);
    }

    void scatter(plot plt, std.list<T> xs, std.list<T> ys, string style, float radius, string color){
        scatter(plt,xs.to_double_list(),ys.to_double_list(),style,radius,color);
    }
}

plot_arg gColor(string color){
    plot_arg out;
    out.t = ARG_COLOR;
    out.data.s = color;
    return out;
}

plot_arg gRadius(float radius){
    plot_arg out;
    out.t = ARG_RADIUS;
    out.data.f = radius;
    return out;
}

plot_arg gThickness(float thickness){
    plot_arg out;
    out.t = ARG_THICKNESS;
    out.data.f = thickness;
    return out;
}

plot_arg gStyle(string style){
    plot_arg out;
    out.t = ARG_STYLE;
    out.data.s = style;
    return out;
}

plot_arg_list __add__(plot_arg a, plot_arg b){
    plot_arg_list out = std.make_list<plot_arg>();
    out.append(a);
    out.append(b);
    return out;
}

plot_arg_list __add__(plot_arg_list a, plot_arg b){
    a.append(b);
    return a;
}

template<T = double, float, int>{

    void line(plot plt, std.list<T> xs, std.list<T> ys, float thickness){
        line(plt,xs,ys,thickness,color_cycle[(plt->color_cycle) % n_cycle]);
        plt->color_cycle++;
    }

    void line(plot plt, std.list<T> xs, std.list<T> ys){
        line(plt,xs,ys,1);
    }

    void line(plot plt, std.list<T> xs, std.list<T> ys, plot_arg arg0){
        float thickness = 1;
        string color = color_cycle[(plt->color_cycle) % n_cycle];
        switch (arg0.t){
            case ARG_THICKNESS:
                thickness = arg0.data.f;
                break;
            case ARG_COLOR:
                color = arg0.data.s;
                break;
            default:
                break;
        }
        line(plt,xs,ys,thickness,color);
    }

    void line(plot plt, std.list<T> xs, std.list<T> ys, plot_arg_list args){
        float thickness = 1;
        string color = color_cycle[(plt->color_cycle) % n_cycle];
        foreach(auto arg0 in args){
            switch (arg0.t){
                case ARG_THICKNESS:
                    thickness = arg0.data.f;
                    break;
                case ARG_COLOR:
                    color = arg0.data.s;
                    break;
                default:
                    break;
            }
        }
        line(plt,xs,ys,thickness,color);
    }

    void scatter(plot plt, std.list<T> xs, std.list<T> ys, string style, float radius){
        scatter(plt,xs,ys,style,radius,color_cycle[(plt->color_cycle) % n_cycle]);
        plt->color_cycle++;
    }

    void scatter(plot plt, std.list<T> xs, std.list<T> ys, string style){
        scatter(plt,xs,ys,style,1);
    }

    void scatter(plot plt, std.list<T> xs, std.list<T> ys){
        scatter(plt,xs,ys,"o");
    }

    void scatter(plot plt, std.list<T> xs, std.list<T> ys, plot_arg arg0){
        float radius = 1;
        string color = color_cycle[(plt->color_cycle) % n_cycle];
        string style = "o";
        switch (arg0.t){
            case ARG_STYLE:
                style = arg0.data.s;
                break;
            case ARG_RADIUS:
                radius = arg0.data.f;
                break;
            case ARG_COLOR:
                color = arg0.data.s;
                break;
            default:
                break;
        }
        scatter(plt,xs,ys,style,radius,color);
    }

    void scatter(plot plt, std.list<T> xs, std.list<T> ys, plot_arg_list args){
        float radius = 1;
        string color = color_cycle[(plt->color_cycle) % n_cycle];
        string style = "o";
        foreach(auto arg0 in args){
            switch (arg0.t){
                case ARG_STYLE:
                    style = arg0.data.s;
                    break;
                case ARG_RADIUS:
                    radius = arg0.data.f;
                    break;
                case ARG_COLOR:
                    color = arg0.data.s;
                    break;
                default:
                    break;
            }
        }
        scatter(plt,xs,ys,style,radius,color);
    }

}

void show(plot plt){
    plt.init_window();

    while (!WindowShouldClose())
    {
        BeginDrawing();

        ClearBackground(RAYWHITE);

        plt.draw_all();

        EndDrawing();
    }

    plt.close();
}